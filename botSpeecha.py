import os
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
load_dotenv("api.env")

TELEGRAM_TOKEN = os.getenv("API_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
AZURE_KEY = os.getenv("AZURE_KEY")
AZURE_REGION = os.getenv("AZURE_REGION")

import asyncio
import openai
import datetime
import speech_recognition as sr
from pydub import AudioSegment

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
load_dotenv("api.env")
API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª api.env")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ ===
LANGUAGES = [
    ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru-RU"),
    ("üá¨üáß English", "en-US"),
    ("üá®üá≥ ‰∏≠Êñá", "zh-CN"),
    ("üá∞üáø “ö–∞–∑–∞“õ—à–∞", "kk-KZ"),
]

# === –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
user_languages = {}  # user_id -> {from: index, to: index}
user_states = {}        # user_id -> str (–Ω–∞–ø—Ä–∏–º–µ—Ä, "recording", "idle") –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
recording_tasks = {}    # user_id -> asyncio.Task –ó–∞–ø–∏—Å—å –∑–≤—É–∫–∞ –∏ –º–∏–≥–∞–Ω–∏–µ
user_last_message = {}      # user_id -> Message

# === –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
def get_main_menu(user_id: int):
    langs = user_languages.get(user_id, {"from": 0, "to": 1})
    from_lang = LANGUAGES[langs["from"]][0]
    to_lang = LANGUAGES[langs["to"]][0]
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üëÇ –Ø –≥–æ–≤–æ—Ä—é –Ω–∞: {from_lang}"),
             KeyboardButton(text=f"üó£ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞: {to_lang}")],
            [KeyboardButton(text="üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏")],
            [KeyboardButton(text="üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏"), KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def detect_lang(text):
    try:
        return detect(text)
    except:
        return "unknown"

# === –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Chat GPT ===    
def translate_chatgpt(text, lang_from, lang_to):
    prompt = f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å {lang_from} –Ω–∞ {lang_to}: {text}"
    try:
        client = openai.OpenAI(api_key=OPENAI_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def download_voice(file_id, user_id):
    file = await bot.get_file(file_id)
    file_path = file.file_path
    ogg_path = f"records/voice_{user_id}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.ogg"
    await bot.download_file(file_path, ogg_path)
    return ogg_path

# === –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ ===
def speech_to_text(ogg_path, lang_code):
    try:
        audio = AudioSegment.from_file(ogg_path)
        wav_path = ogg_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")

        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)

        # language=lang_code —Ç–µ–ø–µ—Ä—å —ç—Ç–æ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –≤–∏–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä "ru-RU"
        text = recognizer.recognize_google(audio_data, language=lang_code)
        return text, lang_code
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}", "unknown"

# === –û–∑–≤—É—á–∫–∞ Azure ===    
def synthesize_azure(text, lang_code):
    try:
        import azure.cognitiveservices.speech as speechsdk
        import datetime
        import os

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ–∑–∞
        speech_config = speechsdk.SpeechConfig(subscription=AZURE_KEY, region=AZURE_REGION)
        speech_config.speech_synthesis_language = lang_code  # –ü—Ä—è–º–æ –ø–µ—Ä–µ–¥–∞—ë–º –∏–∑ LANGUAGES
        speech_config.set_speech_synthesis_output_format(
            speechsdk.SpeechSynthesisOutputFormat.Ogg16Khz16BitMonoOpus
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
        filename = f"azure_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.ogg"
        audio_path = os.path.join("records", filename)
        audio_output = speechsdk.audio.AudioOutputConfig(filename=audio_path)

        # –°–∏–Ω—Ç–µ–∑
        synthesizer = speechsdk.SpeechSynthesizer(speech_config=speech_config, audio_config=audio_output)
        result = synthesizer.speak_text_async(text).get()

        if result.reason == speechsdk.ResultReason.SynthesizingAudioCompleted:
            return audio_path
        else:
            print("‚ùå Azure TTS –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è:", result.reason)
            return None

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ Azure TTS:", e)
        return None
  
# === –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ===
def get_language_inline_keyboard(prefix: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            *[
                [InlineKeyboardButton(text=name, callback_data=f"{prefix}_{i}")]
                for i, (name, code) in enumerate(LANGUAGES)
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_lang")]
        ]
    )

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_languages:
        user_languages[user_id] = {"from": 0, "to": 1}
    await message.answer(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Speecha ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
    "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.\n"
    "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n\n"
    "üîÅ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏.\n",
    reply_markup=get_main_menu(user_id)
)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏" ===
#@dp.message(F.text == "üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
#async def handle_speak(message: Message):
#        await message.answer("–°–µ–∫—É–Ω–¥—É, —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≤–µ–¥—É –∏ –æ–∑–≤—É—á—É!")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏" ===
@dp.message(F.text == "üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏")
async def handle_translate(message: Message):
    user_id = message.from_user.id
    last_msg = user_last_message.get(user_id)

    if not last_msg:
        await message.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å.")
        return

    langs = user_languages.get(user_id, {"from": 0, "to": 1})
    lang_from = LANGUAGES[langs["from"]][1]
    lang_to = LANGUAGES[langs["to"]][1]

    if last_msg.text:
        detected_lang = detect_lang(last_msg.text)
        if detected_lang == lang_to:
            await message.answer(f"üîÅ –Ø–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í–æ—Ç —Ç–µ–∫—Å—Ç:\n<b>{last_msg.text}</b>")
            return

        translated = translate_chatgpt(last_msg.text, detected_lang, lang_to)
        await message.answer(f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}")

    elif last_msg.voice:
        ogg_path = await download_voice(last_msg.voice.file_id, user_id)
        recognized_text, lang_voice = speech_to_text(ogg_path, lang_from)

        if lang_voice == lang_to:
            await message.answer(f"üîÅ –Ø–∑—ã–∫ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í—ã —Å–∫–∞–∑–∞–ª–∏:\n<b>{recognized_text}</b>")
            return

        translated = translate_chatgpt(recognized_text, lang_voice, lang_to)
        await message.answer(f"<i>–í—ã —Å–∫–∞–∑–∞–ª–∏:</i> {recognized_text}\n<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}")

        audio_path = synthesize_azure(translated, lang_to)

        if audio_path and os.path.exists(audio_path):
            await message.answer_voice(voice=types.FSInputFile(audio_path))
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏. –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" ===
@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def handle_write(message: Message):
    user_id = message.from_user.id
    await message.answer(
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Speecha ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
    "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.\n"
    "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç.\n\n"
    "üîÅ –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏.\n",
    reply_markup=get_main_menu(user_id)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –≥–æ–≤–æ—Ä—é –Ω–∞" ===
@dp.message(F.text.startswith("üëÇ –Ø –≥–æ–≤–æ—Ä—é –Ω–∞:"))
async def choose_from_lang(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ:", reply_markup=get_language_inline_keyboard("from"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞" ===
@dp.message(F.text.startswith("üó£ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞:"))
async def choose_to_lang(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å:", reply_markup=get_language_inline_keyboard("to"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ===
@dp.callback_query(F.data.startswith(("from_", "to_")))
async def set_language_callback(call: CallbackQuery):
    user_id = call.from_user.id
    langs = user_languages.get(user_id, {"from": 0, "to": 1})
    prefix, index = call.data.split("_")
    index = int(index)

    # –í—ã–±—Ä–∞–ª–∏ —Ç–æ—Ç –∂–µ —è–∑—ã–∫ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (prefix == "from" and index == langs["from"]) or (prefix == "to" and index == langs["to"]):
        await call.answer("‚õî –≠—Ç–æ—Ç —è–∑—ã–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=False)
        return

    if prefix == "from":
        # –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å "to", –∑–∞–º–µ–Ω–∏—Ç—å "to" –Ω–∞ –ø–µ—Ä–≤—ã–π –¥—Ä—É–≥–æ–π
        if index == langs["to"]:
            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
            langs["from"], langs["to"] = langs["to"], langs["from"]
        else:
            langs["from"] = index

    elif prefix == "to":
        if index == langs["from"]:
            langs["from"], langs["to"] = langs["to"], langs["from"]
        else:
            langs["to"] = index

    user_languages[user_id] = langs

    await call.message.delete()
    await call.message.answer("‚úÖ –Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=get_main_menu(user_id))

# === –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ ===
@dp.message(F.text == "üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏")
async def swap_languages(message: Message):
    user_id = message.from_user.id
    langs = user_languages.get(user_id, {"from": 0, "to": 1})
    langs["from"], langs["to"] = langs["to"], langs["from"]
    user_languages[user_id] = langs
    await message.answer("üîÑ –Ø–∑—ã–∫–∏ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –º–µ—Å—Ç–∞–º–∏", reply_markup=get_main_menu(user_id))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞ ===
@dp.callback_query(F.data == "cancel_lang")
async def cancel_language_selection(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu(call.from_user.id))

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def catch_user_message(message: Message):
    if message.text in ["üîÅ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "üîÅ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏"]:
        return  # –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    user_last_message[message.from_user.id] = message

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
